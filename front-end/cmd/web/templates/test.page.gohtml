{{template "base" .}}

{{define "content" }}
        <style>
            * {
                -webkit-box-sizing: border-box;
                -moz-box-sizing: border-box;
                box-sizing: border-box;
            }


            body
            {
                margin: 0 ;
                padding: 0 ;
                font-family: 'Arial';
                background-image: linear-gradient(278deg, #000000, #111111);
            }

            .error {
                color: red ;
            }

            .success {
                color: green ;
            }

            .info {
                color: cyan ;
            }

            h1
            {
                font-size: 40px ;
                color: white ;
            }

            .app-container
            {
                display: flex;
                flex-direction: column;
                justify-content: center;
                margin-top: 50px ;
                margin-right: 20% ;
                margin-left: 20% ;
            }

            .app-container .services-container {
                margin-top: 30px ;
                display: flex ;
                column-gap: 30px;
                max-height: 50px;
            }
            .app-container .services-container .service {
                cursor: pointer ;
                background-color: #555;
                color: white ;
                font-size: 18px ;
                padding-top: 10px ;
                padding-bottom: 10px ;
                height: 30px ;
                text-align: center;
                border-radius: 5px;
                font-weight: 500;
                height: 50px ;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0 ;
                padding-right: 10px ;
                padding-left: 10px ;
                transition: 0.15s ease-in-out ;
                background: none ;
            }


            .app-container .services-container .service:hover {
                /* background-color: purple; */
                background: none ;
                outline: 2px white solid ;
            }


            .app-container .services-container .service span {
                cursor: pointer ;
                padding: 10px ;
            }


            .app-container .body-container {
                margin-top: 50px ;
                font-size: 16px ;
            }

            .informer-headline {
                font-size: 24px;
                color: white ;
            }


            .app-container .body-container .output-container {
                background-color: none ;
                outline: 1px solid white ;
                margin-top: 30px ;
                height: 200px ;
                color: #fff ;
                padding: 20px ;
                padding-bottom: 20px ;
                padding-top: 10px;
                border-radius: 3px;
                font-size: 16px ;
                width: 100% ;
            }

            .app-container .body-container .sent-container {
                width: 100% ;
            }

            .app-container .body-container .received-container {
                width: 100% ;
            }

            .app-container .body-container .sent-received-container {
                display: flex;
                margin-top: 40px ;
                column-gap: 50px;
                font-size: 16px ;
                width: 100% ;
            }

            .box-container {
                background-color: none ;
                outline: 1px solid white ;
                margin-top: 20px ;
                height: 200px ;
                padding-right: 80px;
                padding-left: 20px;
                color: #fff ;
                padding-bottom: 20px ;
                padding-top: 16px;
                border-radius: 3px;
                font-size: 16px ;
                width: 100%;
            }
        </style>
        <div class="app app-container">
            <h1>Microservices simulation</h1>
            <div class="services-container">
                <div class="service" id="authBrokerBtn">
                    <span>Auth service</span>
                </div>
                <div class="service" id="mailBtn">
                    <span>Mail service</span>
                </div>
                <div class="service" id="logBtn">
                    <span>Logger service</span>
                </div>
                <div class="service" id="brokerBtn">
                    <span>Broker service</span>
                </div>
                <div class="service" id="logGBtn">
                    <span>gRPC log messages</span>
                </div>
            </div>
            <div class="body-container">
                <h2 class="informer-headline">Output</h2>
                <div class="output-container" id="output">
                    <p>The output response from the service will be here once received from the microservice.</p>
                </div>
                <div class="sent-received-container">
                    <div class="sent-container">
                        <h2 class="informer-headline">Sent</h2>
                        <div class="box-container" id="payload">
                            <p>Where the sent request will be put</p>
                        </div>
                    </div>
                    <div class="received-container">
                        <h2 class="informer-headline">Received</h2>
                        <div class="box-container" id="received">
                            <p>Here where the received response will be put.</p>
                        </div>
                    </div>
                </div>
            </div>  
        </div>
{{end}}

{{define "js"}}
    <script>
    let brokerBtn = document.getElementById("brokerBtn");
    let authBrokerBtn = document.getElementById("authBrokerBtn");
    let logBtn = document.getElementById("logBtn");
    let logGBtn = document.getElementById("logGBtn");
    let output = document.getElementById("output");
    let sent = document.getElementById("payload");
    let recevied = document.getElementById("received");
    let mailBtn = document.getElementById("mailBtn");

    mailBtn.addEventListener("click", function() {

        const payload = {
            action: "mail",
            mail: {
                from: "me@example.com",
                to: "you@there.com",
                subject: "Test email",
                message: "Hello world!",
            }
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json");

        const body = {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: headers,
        }

        fetch("http:\/\/localhost:8080/handle", body)
        .then((response) => response.json())
        .then((data) => {
            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            received.innerHTML = JSON.stringify(data, undefined, 4);
            if (data.error) {
                output.innerHTML = `<br><strong class="error">Error:</strong> ${data.message}`;
            } else {
                output.innerHTML = `<br><strong class="info">Response from broker service</strong>: ${data.message}`;
            }
        })
        .catch((error) => {
            output.innerHTML = "<br><br><b class='error'>Error: </b>" + error;
        })
    })

    logGBtn.addEventListener("click", function() {
        const payload = {
            action: "log",
            log: {
                name: "event",
                data: "Some kind of gRPC data",
            }
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json");

        const body = {
            method: "POST",
            body: JSON.stringify(payload),
            headers: headers,
        }

        fetch("http:\/\/localhost:8080/log-grpc", body)
        .then((response) => response.json())
        .then((data) => {
            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            received.innerHTML = JSON.stringify(data, undefined, 4);
            if (data.error) {
                output.innerHTML = `<br><strong class='error'>Error:</strong> ${data.message}`;
            } else {
                output.innerHTML = `<br><strong class='info'>Response from broker service</strong>: ${data.message}`;
            }
        })
        .catch((error) => {
            output.innerHTML = "<br><br><b class='error'>Error: </b>" + error;
        })        
    })

    logBtn.addEventListener("click", function() {
        const payload = {
            action: "log",
            log: {
                name: "event",
                data: "Some kind of data",
            }
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json");

        const body = {
            method: "POST",
            body: JSON.stringify(payload),
            headers: headers,
        }

        fetch("http:\/\/localhost:8080/handle", body)
        .then((response) => response.json())
        .then((data) => {
            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            received.innerHTML = JSON.stringify(data, undefined, 4);
            if (data.error) {
                output.innerHTML = `<br><strong class='error'>Error:</strong> ${data.message}`;
            } else {
                output.innerHTML = `<br><strong class='info'>Response from broker service</strong>: ${data.message}`;
            }
        })
        .catch((error) => {
            output.innerHTML = "<br><br><b class='error'>Error: </b>" + error;
        })        
    })

    authBrokerBtn.addEventListener("click", function() {

        const payload = {
            action: "auth",
            auth: {
                email: "admin@example.com",
                password: "verysecret",
            }
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json");

        const body = {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: headers,
        }

        fetch("http:\/\/localhost:8080/handle", body)
        .then((response) => response.json())
        .then((data) => {
            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            received.innerHTML = JSON.stringify(data, undefined, 4);
            if (data.error) {
                output.innerHTML = `<br><strong class='error'>Error:</strong> ${data.message}`;
            } else {
                output.innerHTML = `<br><strong class='info'>Response from broker service</strong>: ${data.message}`;
            }
        })
        .catch((error) => {
            output.innerHTML = "<br><br><b class='error'>Error: </b>" + error;
        })
    })

    brokerBtn.addEventListener("click", function() {

        const body = {
            method: 'POST',
        }

        fetch("http:\/\/localhost:8080", body)
        .then((response) => response.json())
        .then((data) => {
            sent.innerHTML = "empty post request";
            received.innerHTML = JSON.stringify(data, undefined, 4);
            if (data.error) {
                console.log(data.message);
            } else {
                output.innerHTML = `<br><strong class='info'>Response from broker service</strong>: ${data.message}`;
            }
        })
        .catch((error) => {
            output.innerHTML = "<br><br><b class='error'>Error: </b>" + error;
        })
    })
        
    </script>
{{end}}
